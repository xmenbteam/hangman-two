[{"/Users/samparry/Documents/Coding/projects/hangman-two/src/index.js":"1","/Users/samparry/Documents/Coding/projects/hangman-two/src/App.js":"2","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Pic.js":"3","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Word.js":"4","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Alphabet.js":"5","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Gameover.js":"6","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/API.js":"7","/Users/samparry/Documents/Coding/projects/hangman-two/src/bits.js":"8"},{"size":219,"mtime":1611773240910,"results":"9","hashOfConfig":"10"},{"size":3475,"mtime":1611789526037,"results":"11","hashOfConfig":"10"},{"size":159,"mtime":1611751838802,"results":"12","hashOfConfig":"10"},{"size":1814,"mtime":1611823660247,"results":"13","hashOfConfig":"10"},{"size":700,"mtime":1611771971064,"results":"14","hashOfConfig":"10"},{"size":285,"mtime":1611763889204,"results":"15","hashOfConfig":"10"},{"size":467,"mtime":1611773242349,"results":"16","hashOfConfig":"10"},{"size":477,"mtime":1611789542959,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"723tjz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/samparry/Documents/Coding/projects/hangman-two/src/index.js",[],["37","38"],"/Users/samparry/Documents/Coding/projects/hangman-two/src/App.js",["39"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Picture from \"./Components/Pic\";\nimport Word from \"./Components/Word\";\nimport Alphabet from \"./Components/Alphabet\";\nimport Gameover from \"./Components/Gameover\";\nimport alphEntries from \"./bits\";\n\nfunction App() {\n  const [usedLetters, setUsedLetters] = useState([]);\n  const [correctLetters, setCorrectLetters] = useState([]);\n\n  const [wordsArray, setWordsArray] = useState([\n    \"test: one\",\n    \"test, 2\",\n    \"test (three)\",\n  ]);\n  const [word, setWord] = useState(wordsArray[0]);\n  const [wordArray, setWordArray] = useState(word.toUpperCase().split(\"\"));\n\n  const [pictures] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n  const [currentPic, setCurrentPic] = useState(pictures[0]);\n\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(false);\n\n  const handleClick = (letterData) => {\n    const letter = letterData.target.innerText;\n    // if the letter isn't in the chosen word array move the picture on\n    wordArray.indexOf(letter) === -1\n      ? setCurrentPic(pictures[currentPic + 1])\n      : // but if it is, push it in to the new word array\n        setCorrectLetters([...correctLetters, letter]);\n    // if the letter isn't in the used letter array, add it to the letter array\n    usedLetters.indexOf(letter) === -1 &&\n      setUsedLetters([...usedLetters, letter]);\n  };\n\n  const randomNum = () => {\n    const randomNumber = Math.floor(Math.random() * wordsArray.length);\n    return randomNumber;\n  };\n\n  const newGame = () => {\n    setGameOver(false);\n    setUsedLetters([]);\n    setCorrectLetters([]);\n    setWord(wordsArray[randomNum()]);\n    setWordArray(word.toUpperCase().split(\"\"));\n    setCurrentPic(pictures[0]);\n    setWinner(false);\n  };\n\n  // const wordArr = [];\n  // const isWin = () => {\n  //   // filter out the letters themselves in the arrays and check they're all there\n  //   const clickedLetters = correctLetters.sort();\n  //   const wordLetters = wordArray.sort();\n\n  //   for (let i in wordLetters) {\n  //     for (let j in clickedLetters) {\n  //       if (wordLetters[i] === clickedLetters[j]) {\n  //         wordArr.push(wordLetters[i]);\n  //       }\n  //     }\n  //   }\n  //   console.log(wordArr, \"WORD ARR\");\n  //   console.log(clickedLetters, \"clicked letters\");\n  //   console.log(wordLetters, \"wordletters\");\n  // };\n\n  useEffect(() => {\n    // isWin();\n    if (currentPic === 8) {\n      setGameOver(true);\n      setWinner(false);\n    } else if (correctLetters.length === wordArray.length) {\n      setGameOver(true);\n      setWinner(true);\n    }\n  }, [usedLetters, gameOver, currentPic, correctLetters, wordArray]);\n\n  return (\n    <div className=\"App\">\n      <h1>Hangman</h1>\n\n      {gameOver ? (\n        <div>\n          <Gameover word={word} newGame={newGame} winner={winner} />\n          <Word\n            wordArray={wordArray}\n            usedLetters={usedLetters}\n            gameOver={gameOver}\n          />\n        </div>\n      ) : (\n        <div>\n          <button onClick={newGame}>Different Word?</button>\n          <Picture currentPic={currentPic} />\n          <Word\n            wordArray={wordArray}\n            usedLetters={usedLetters}\n            setUsedLetters={setUsedLetters}\n          />\n          <Alphabet\n            alphEntries={alphEntries}\n            handleClick={handleClick}\n            usedLetters={usedLetters}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Pic.js",[],"/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Word.js",[],"/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Alphabet.js",[],"/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/Gameover.js",[],"/Users/samparry/Documents/Coding/projects/hangman-two/src/Components/API.js",[],["40","41"],"/Users/samparry/Documents/Coding/projects/hangman-two/src/bits.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":13,"column":22,"nodeType":"48","messageId":"49","endLine":13,"endColumn":35},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'setWordsArray' is assigned a value but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]